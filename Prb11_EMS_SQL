package EMS_Prob11;


public class Employee {
    private int employeeId;
    private String name;
    private String designation;
    private double salary;

    public Employee(int employeeId, String name, String designation, double salary) {
        this.employeeId = employeeId;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    // Getters and setters

    public int getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(int employeeId) {
        this.employeeId = employeeId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDesignation() {
        return designation;
    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee{" +
                "employeeId=" + employeeId +
                ", name='" + name + '\'' +
                ", designation='" + designation + '\'' +
                ", salary=" + salary +
                '}';
    }
}
-------------------------------------------------

package EMS_Prob11;



import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class EmployeeService {
    public void addEmployee(Employee employee) {
        try (Connection connection = ConnectionDB.getConnection();
             PreparedStatement statement = connection.prepareStatement(
                     "INSERT INTO Employee (employee_id, employee_name, designation, salary) VALUES (?, ?, ?, ?)")) {

            statement.setInt(1, employee.getEmployeeId());
            statement.setString(2, employee.getName());
            statement.setString(3, employee.getDesignation());
            statement.setDouble(4, employee.getSalary());

            int rowsInserted = statement.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Employee added successfully!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void removeEmployee(int employeeId) {
        try (Connection connection = ConnectionDB.getConnection();
             CallableStatement statement = connection.prepareCall("{CALL DeleteEmployee(?)}")) {

            statement.setInt(1, employeeId);

            int rowsDeleted = statement.executeUpdate();
            if (rowsDeleted > 0) {
                System.out.println("Employee deleted successfully!");
            } else {
                System.out.println("Employee with ID " + employeeId + " does not exist.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void viewAllEmployees() {
        try (Connection connection = ConnectionDB.getConnection();
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery("SELECT * FROM Employee")) {

            List<Employee> employees = new ArrayList<>();

            while (resultSet.next()) {
                int employeeId = resultSet.getInt("employee_id");
                String name = resultSet.getString("employee_name");
                String designation = resultSet.getString("designation");
                double salary = resultSet.getDouble("salary");

                Employee employee = new Employee(employeeId, name, designation, salary);
                employees.add(employee);
            }

            if (!employees.isEmpty()) {
                System.out.println("Employee Details:");
                for (Employee employee : employees) {
                    System.out.println(employee);
                }
            } else {
                System.out.println("No employees found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void updateEmployee(int employeeId) {
        try (Connection connection = ConnectionDB.getConnection();
             PreparedStatement statement = connection.prepareStatement(
                     "UPDATE Employee SET employee_name = ?, designation = ?, salary = ? WHERE employee_id = ?")) {

            Scanner scanner = new Scanner(System.in);

            System.out.print("Enter employee name: ");
            String name = scanner.nextLine();

            System.out.print("Enter employee designation: ");
            String designation = scanner.nextLine();

            System.out.print("Enter employee salary: ");
            double salary = scanner.nextDouble();

            statement.setString(1, name);
            statement.setString(2, designation);
            statement.setDouble(3, salary);
            statement.setInt(4, employeeId);

            int rowsUpdated = statement.executeUpdate();
            if (rowsUpdated > 0) {
                System.out.println("Employee updated successfully!");
            } else {
                System.out.println("Employee with ID " + employeeId + " does not exist.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
---------------------------------------
package EMS_Prob11;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        EmployeeService employeeService = new EmployeeService();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Employee Management System");
            System.out.println("1. Add Employee");
            System.out.println("2. Remove Employee");
            System.out.println("3. View All Employees");
            System.out.println("4. Update Employee");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            if (choice == 0) {
                System.out.println("Thank you for using the Employee Management System. Goodbye!");
                break;
            }

            switch (choice) {
                case 1:
                    System.out.println("Add Employee");
                    System.out.print("Enter employee ID: ");
                    int employeeId = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter employee name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter employee designation: ");
                    String designation = scanner.nextLine();
                    System.out.print("Enter employee salary: ");
                    double salary = scanner.nextDouble();

                    Employee employee = new Employee(employeeId, name, designation, salary);
                    employeeService.addEmployee(employee);
                    break;
                case 2:
                    System.out.println("Remove Employee");
                    System.out.print("Enter employee ID: ");
                    int idToRemove = scanner.nextInt();
                    employeeService.removeEmployee(idToRemove);
                    break;
                case 3:
                    System.out.println("View All Employees");
                    employeeService.viewAllEmployees();
                    break;
                case 4:
                    System.out.println("Update Employee");
                    System.out.print("Enter employee ID: ");
                    int idToUpdate = scanner.nextInt();
                    employeeService.updateEmployee(idToUpdate);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
            System.out.println();
        }
    }
}

----------------------------------------------------
package EMS_Prob11;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConnectionDB {
	private static final String URL = "jdbc:mysql://localhost:3306/hiltonHotel";
  private static final String USERNAME = "root";
  private static final String PASSWORD = "Password";

  public static Connection getConnection() throws SQLException {
      return DriverManager.getConnection(URL, USERNAME, PASSWORD);
  }

}





