package pkgDay7;

import java.util.*;
import java.util.stream.Collectors;

public class EmployeeSystem {
	HashMap<Integer, Employee> map = new HashMap<>();
	Scanner scan = new Scanner(System.in);

	void display(Employee rec) {
		if (map.isEmpty()) {
			System.out.println("The list has no records\n");
		}

		System.out.println("No of Employees:" + Employee.empCount + "\nEmployee List:" + map);
	}

	public static HashMap<Integer, Employee> sortedByName(HashMap<Integer, Employee> hm) {
		// Create a list from elements of HashMap
		List<Map.Entry<Integer, Employee>> list = new LinkedList<Map.Entry<Integer, Employee>>(hm.entrySet());

		// Sort the list
		Collections.sort(list, new Comparator<Map.Entry<Integer, Employee>>() {
			public int compare(Map.Entry<Integer, Employee> o1, Map.Entry<Integer, Employee> o2) {
				return (o1.getValue().getEmpName()).compareTo(o2.getValue().getEmpName());
			}
		});

		// put data from sorted list to hashmap
		HashMap<Integer, Employee> temp = new LinkedHashMap<Integer, Employee>();
		for (Map.Entry<Integer, Employee> aa : list) {
			temp.put(aa.getKey(), aa.getValue());
		}
		return temp;
	}
	
	public static HashMap<Integer, Employee> sortedBySal(HashMap<Integer, Employee> hm) {
		// Create a list from elements of HashMap
		List<Map.Entry<Integer, Employee>> list = new LinkedList<Map.Entry<Integer, Employee>>(hm.entrySet());

		// Sort the list
		Collections.sort(list, new Comparator<Map.Entry<Integer, Employee>>() {
			public int compare(Map.Entry<Integer, Employee> o1, Map.Entry<Integer, Employee> o2) {
				return (o1.getValue().getSalary()).compareTo(o2.getValue().getSalary());
			}
		});

		// put data from sorted list to hashmap
		HashMap<Integer, Employee> temp = new LinkedHashMap<Integer, Employee>();
		for (Map.Entry<Integer, Employee> aa : list) {
			temp.put(aa.getKey(), aa.getValue());
		}
		return temp;
	}

	void menu() {
		System.out.println("Menu:");
		System.out.println(
				"1.Add Employee\n2.View Employee\n3.Search Employee5\n4.Sort Employee acc to salary\n5.Sort Employee acc to name\n6.Exit");
		System.out.println("Enter choice:(1-5)");
	}

	public static void main(String[] args) {
		Employee record = new Employee();
		EmployeeSystem record1 = new EmployeeSystem();

		int option = 0;
		while (true) {
			record1.menu();
			option = record1.scan.nextInt();

			switch (option) {

			case 1:
				try {
					System.out.print("What is the Employee id ? ");
					int empId = record1.scan.nextInt();

					System.out.print("What is the Employee Name ? ");
					String name = record1.scan.next();

					System.out.print("What is the Designation ? ");
					String des = record1.scan.next();

					System.out.print("What is the Salary ? ");
					int sal = record1.scan.nextInt();
					record.setEmpCount(Employee.empCount + 1);
					record = new Employee(name, des, sal);
					record1.map.put(empId, record);
					System.out.print("Record has been saved.");
				} catch (ArithmeticException e1) {
					System.out.println(e1);
				} catch (InputMismatchException e) {
					System.out.println(e);
				}

				break;

			case 2:
				record1.display(record);
				break;

			case 3:
				System.out.print("What is the Employee id ? ");
				int empId = record1.scan.nextInt();

				System.out.print("\nEmployees: " + record1.map.entrySet().stream().filter(e -> e.getKey() == empId)
						.collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())) + "\n");

				break;
			case 4:
				Map<Integer, Employee> sortedBySal = sortedBySal(record1.map);

				for (Map.Entry<Integer, Employee> en : sortedBySal.entrySet()) {
					System.out.println("Key = " + en.getKey() + ", Value = " + en.getValue());
				}

				break;
			case 5:
				Map<Integer, Employee> sortedByName = sortedByName(record1.map);

				for (Map.Entry<Integer, Employee> en : sortedByName.entrySet()) {
					System.out.println("Key = " + en.getKey() + ", Value = " + en.getValue());
				}

				break;
//			case 6:
//				System.out.print("Employee sorted based on employee name in ascending order:\n");
//				record1.empList.stream().sorted((o1, o2) -> o1.getEmpName().compareTo(o2.getEmpName()))
//						.forEach(e -> System.out.print(e + " \n"));
//				break;
//			case 7:
//				System.out.print("Employee with UPPER case:\n");
//				record1.empList.stream().map(name -> name.getEmpName().toUpperCase())
//						.forEach(e -> System.out.print(e + " \n"));
//				break;
			case 8:
				System.out.println("\nThank you for using the program. Goodbye!\n");
				System.exit(0);
				break;

			default:
				System.out.println("\nInvalid input\n");
				break;
			}
		}
	}

}


package pkgDay7;

public class Employee {
	static int empCount = 0;
	private String empName;
	private String designation;
	private Integer salary;

	public Employee() {

	}

	public Employee(String empName, String des, int sal) {
		this.empName = empName;
		this.designation = des;
		this.salary = sal;
	}

	public String getEmpName() {
		return empName;
	}

	public void setEmpName(String empName) {
		this.empName = empName;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	public Integer getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public int getEmpCount() {
		return empCount;
	}

	public void setEmpCount(int empCount) {
		Employee.empCount = empCount;
	}

	@Override
	public String toString() {
		return "Employee [empName=" + empName + ", designation=" + designation + ", salary=" + salary + "]";
	}

}
